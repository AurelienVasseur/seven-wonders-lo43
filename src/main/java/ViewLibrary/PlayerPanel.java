/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ViewLibrary;

import EnumLibrary.Action;
import EnumLibrary.Evolution;
import EnumLibrary.Resource;
import ModelLibrary.CardLibrary.Card;
import ModelLibrary.PlayerLibrary.Deck;
import ModelLibrary.PlayerLibrary.Player;
import ModelLibrary.ScoreLibrary.RessourcePack;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Rectangle;
import java.util.EnumSet;
import javax.swing.DefaultListModel;
import javax.swing.Scrollable;
import javax.swing.SwingConstants;

/**
 *
 * @author Hicham, Aurélien
 */
public class PlayerPanel extends javax.swing.JPanel {
    private MainFrame frame;
    private int playerId;
    
    /**
     * Creates new form PlayerPanel
     * @param frame
     * @param playerId
     */
    public PlayerPanel(MainFrame frame, int playerId) {
        this.frame = frame;
        this.playerId = playerId;
        initComponents();
        this.jLabelPLayerId.setText("Player n° " + this.playerId);
        
        this.guiUpdate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelPLayerId = new javax.swing.JLabel();
        jButtonLeaderboard = new javax.swing.JButton();
        jScrollPaneCards = new javax.swing.JScrollPane();
        jListCards = new javax.swing.JList<>();
        jLabelDeck = new javax.swing.JLabel();
        jScrollPaneActions = new javax.swing.JScrollPane();
        jListAction = new javax.swing.JList<>();
        jLabelActions = new javax.swing.JLabel();
        jScrollPaneCardsPlayed = new javax.swing.JScrollPane();
        jListCardsPlayed = new javax.swing.JList<>();
        jLabelCardsPlayed = new javax.swing.JLabel();
        jLabelWonderName = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jButtonValidate = new javax.swing.JButton();
        jLabelCoins = new javax.swing.JLabel();
        jLabelCoinsValue = new javax.swing.JLabel();
        jLabelWonderEvolutionFirst = new javax.swing.JLabel();
        jLabelWonderEvolutionSecond = new javax.swing.JLabel();
        jLabelWonderEvolutionThird = new javax.swing.JLabel();
        jLabelCSName = new javax.swing.JLabel();
        jLabelCSValue = new javax.swing.JLabel();
        jLabelTMName = new javax.swing.JLabel();
        jLabelTMValue = new javax.swing.JLabel();
        jLabelCGName = new javax.swing.JLabel();
        jLabelCGValue = new javax.swing.JLabel();
        jLabelECName = new javax.swing.JLabel();
        jLabelECValue = new javax.swing.JLabel();
        jLabelStageName = new javax.swing.JLabel();
        jLabelStageValue = new javax.swing.JLabel();
        jLabelEntrepreunariatName = new javax.swing.JLabel();
        jLabelEntrepreunariatValue = new javax.swing.JLabel();
        jLabelProjetName = new javax.swing.JLabel();
        jLabelProjetValue = new javax.swing.JLabel();
        jLabelVictoryName = new javax.swing.JLabel();
        jLabelVictoryValue = new javax.swing.JLabel();
        jLabelKnowledgeName = new javax.swing.JLabel();
        jLabelKnowledgeValue = new javax.swing.JLabel();
        jLabelCentrifugeName = new javax.swing.JLabel();
        jLabelCentrifugeValue = new javax.swing.JLabel();
        jLabelPumpName = new javax.swing.JLabel();
        jLabelPumpValue = new javax.swing.JLabel();
        jLabelProoferName = new javax.swing.JLabel();
        jLabelProoferValue = new javax.swing.JLabel();
        jLabelCardInfos = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        jLabelNameValue = new javax.swing.JLabel();
        jLabelType = new javax.swing.JLabel();
        jLabelTypeValue = new javax.swing.JLabel();
        jLabelCost = new javax.swing.JLabel();
        jScrollPaneCostValue = new javax.swing.JScrollPane();
        jListCostValue = new javax.swing.JList<>();
        jLabelProductedRessources = new javax.swing.JLabel();
        jScrollPaneProductedRessourcesValue = new javax.swing.JScrollPane();
        jListProductedRessourcesValue = new javax.swing.JList<>();
        jLabelCoinsEarned = new javax.swing.JLabel();
        jLabelCoinsEarnedValue = new javax.swing.JLabel();
        jLabelCardRequiredToPlayForFree = new javax.swing.JLabel();
        jLabelCardRequiredToPlayForFreeValue = new javax.swing.JLabel();
        jLabelCardBecomingFree = new javax.swing.JLabel();
        jLabelCardBecomingFreeValue = new javax.swing.JLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jScrollPaneBuyNeighbourBeforeRessourcesValue = new javax.swing.JScrollPane();
        jListBuyNeighbourBeforeRessourcesValue = new javax.swing.JList<>();
        jLabelBuyNeighborsRessources = new javax.swing.JLabel();
        jButtonBuy = new javax.swing.JButton();
        jLabelCostToBuy = new javax.swing.JLabel();
        jLabelCostToBuyValue = new javax.swing.JLabel();
        jScrollPaneBuyNeighbourAfterRessourcesValue = new javax.swing.JScrollPane();
        jListBuyNeighbourAfterRessourcesValue = new javax.swing.JList<>();

        jLabelPLayerId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelPLayerId.setText("Player n° ID");

        jButtonLeaderboard.setText("Display Leaderboard");
        jButtonLeaderboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonLeaderboardMouseClicked(evt);
            }
        });
        jButtonLeaderboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLeaderboardActionPerformed(evt);
            }
        });

        jListCards.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListCards.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListCards.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListCardsValueChanged(evt);
            }
        });
        jScrollPaneCards.setViewportView(jListCards);

        jLabelDeck.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelDeck.setText("Deck");

        jListAction.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListAction.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListAction.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListActionValueChanged(evt);
            }
        });
        jScrollPaneActions.setViewportView(jListAction);

        jLabelActions.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelActions.setText("Actions");

        jListCardsPlayed.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListCardsPlayed.setEnabled(false);
        jScrollPaneCardsPlayed.setViewportView(jListCardsPlayed);

        jLabelCardsPlayed.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelCardsPlayed.setText("Cards played");

        jLabelWonderName.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelWonderName.setText("Wonder's Name");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButtonValidate.setText("Validate");
        jButtonValidate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidateActionPerformed(evt);
            }
        });

        jLabelCoins.setText("Coins : ");

        jLabelCoinsValue.setText("0");

        jLabelWonderEvolutionFirst.setText("First");

        jLabelWonderEvolutionSecond.setText("Second");

        jLabelWonderEvolutionThird.setText("Third");

        jLabelCSName.setText("CS : ");

        jLabelCSValue.setText("0");

        jLabelTMName.setText("TM : ");

        jLabelTMValue.setText("0");

        jLabelCGName.setText("CG : ");

        jLabelCGValue.setText("0");

        jLabelECName.setText("EC : ");

        jLabelECValue.setText("0");

        jLabelStageName.setText("Stage : ");

        jLabelStageValue.setText("0");

        jLabelEntrepreunariatName.setText("Entrep' : ");

        jLabelEntrepreunariatValue.setText("0");

        jLabelProjetName.setText("Projet : ");

        jLabelProjetValue.setText("0");

        jLabelVictoryName.setText("PV : ");

        jLabelVictoryValue.setText("0");

        jLabelKnowledgeName.setText("PM : ");

        jLabelKnowledgeValue.setText("0");

        jLabelCentrifugeName.setText("Centrifuge : ");

        jLabelCentrifugeValue.setText("0");

        jLabelPumpName.setText("Pump : ");

        jLabelPumpValue.setText("0");

        jLabelProoferName.setText("Proofer : ");

        jLabelProoferValue.setText("0");

        jLabelCardInfos.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelCardInfos.setText("Card Infos");

        jLabelName.setText("Name : ");

        jLabelNameValue.setText("/");

        jLabelType.setText("Type :");

        jLabelTypeValue.setText("/");

        jLabelCost.setText("Cost to build :");

        jListCostValue.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPaneCostValue.setViewportView(jListCostValue);

        jLabelProductedRessources.setText("Producted Ressources :");

        jListProductedRessourcesValue.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPaneProductedRessourcesValue.setViewportView(jListProductedRessourcesValue);

        jLabelCoinsEarned.setText("Coins earned :");

        jLabelCoinsEarnedValue.setText("/");

        jLabelCardRequiredToPlayForFree.setText("Card required to play for free :");

        jLabelCardRequiredToPlayForFreeValue.setText("/");

        jLabelCardBecomingFree.setText("Card becoming free :");

        jLabelCardBecomingFreeValue.setText("/");

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jListBuyNeighbourBeforeRessourcesValue.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListBuyNeighbourBeforeRessourcesValue.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListBuyNeighbourBeforeRessourcesValueValueChanged(evt);
            }
        });
        jScrollPaneBuyNeighbourBeforeRessourcesValue.setViewportView(jListBuyNeighbourBeforeRessourcesValue);

        jLabelBuyNeighborsRessources.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabelBuyNeighborsRessources.setText("Buy ressources producted by neighbors' cards");

        jButtonBuy.setText("Buy");
        jButtonBuy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBuyActionPerformed(evt);
            }
        });

        jLabelCostToBuy.setText("Cost to buy :");

        jLabelCostToBuyValue.setText("/");

        jListBuyNeighbourAfterRessourcesValue.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListBuyNeighbourAfterRessourcesValue.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListBuyNeighbourAfterRessourcesValueValueChanged(evt);
            }
        });
        jScrollPaneBuyNeighbourAfterRessourcesValue.setViewportView(jListBuyNeighbourAfterRessourcesValue);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jSeparator2))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabelCoinsEarned)
                                        .addGap(20, 20, 20)
                                        .addComponent(jLabelCoinsEarnedValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(110, 110, 110))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jLabelName)
                                                    .addComponent(jLabelType)
                                                    .addComponent(jLabelCost))
                                                .addGap(18, 18, 18)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(jLabelTypeValue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                                                    .addComponent(jLabelNameValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                            .addComponent(jLabelProductedRessources)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(jLabelCoins)
                                                            .addGap(18, 18, 18)
                                                            .addComponent(jLabelCoinsValue, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(layout.createSequentialGroup()
                                                            .addComponent(jLabelCSName)
                                                            .addGap(32, 32, 32)
                                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(jLabelTMValue, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(jLabelCSValue, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(jLabelCGValue, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(jLabelECValue, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                                    .addComponent(jLabelTMName)
                                                    .addComponent(jLabelCGName)
                                                    .addComponent(jLabelECName))
                                                .addGap(23, 23, 23)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(14, 14, 14)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                            .addComponent(jLabelProoferName, javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabelEntrepreunariatName, javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                                .addComponent(jLabelPumpName)
                                                                .addGap(35, 35, 35)
                                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                    .addComponent(jLabelProoferValue, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(jLabelPumpValue, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addComponent(jLabelEntrepreunariatValue, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addGap(10, 10, 10)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabelStageName)
                                                                .addGap(34, 34, 34)
                                                                .addComponent(jLabelStageValue, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(28, 28, 28)
                                                                .addComponent(jLabelVictoryName))
                                                            .addGroup(layout.createSequentialGroup()
                                                                .addComponent(jLabelCentrifugeName)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(jLabelCentrifugeValue, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(21, 21, 21)
                                                                .addComponent(jLabelKnowledgeName)))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabelVictoryValue, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                            .addComponent(jLabelKnowledgeValue, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                        .addComponent(jLabelCardInfos)
                                                        .addGap(140, 140, 140))))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(jScrollPaneCostValue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 227, Short.MAX_VALUE)
                                                .addComponent(jScrollPaneProductedRessourcesValue, javax.swing.GroupLayout.Alignment.LEADING))
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabelCardBecomingFree)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(jLabelCardBecomingFreeValue, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(jLabelCardRequiredToPlayForFree)
                                                    .addGap(18, 18, 18)
                                                    .addComponent(jLabelCardRequiredToPlayForFreeValue, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 78, Short.MAX_VALUE)))
                                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelProjetName)
                                .addGap(18, 18, 18)
                                .addComponent(jLabelProjetValue, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(128, 128, 128)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(11, 11, 11)
                                        .addComponent(jLabelPLayerId))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jScrollPaneCards, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(68, 68, 68)
                                                .addComponent(jScrollPaneActions, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jScrollPaneBuyNeighbourAfterRessourcesValue, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jScrollPaneBuyNeighbourBeforeRessourcesValue, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGap(28, 28, 28)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                    .addComponent(jButtonBuy, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGroup(layout.createSequentialGroup()
                                                        .addComponent(jLabelCostToBuy)
                                                        .addGap(27, 27, 27)
                                                        .addComponent(jLabelCostToBuyValue, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))))))))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jLabelCardsPlayed)
                                    .addGap(82, 82, 82)
                                    .addComponent(jLabelDeck)
                                    .addGap(87, 87, 87)
                                    .addComponent(jLabelActions)
                                    .addGap(35, 35, 35))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(jScrollPaneCardsPlayed, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(69, 69, 69)
                                            .addComponent(jButtonValidate, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(54, 54, 54)
                                            .addComponent(jLabelBuyNeighborsRessources))))))
                        .addGap(44, 44, 44))
                    .addComponent(jButtonLeaderboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabelWonderEvolutionFirst)
                    .addComponent(jLabelWonderEvolutionSecond)
                    .addComponent(jLabelWonderEvolutionThird))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(318, 318, 318)
                .addComponent(jLabelWonderName)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCoins)
                            .addComponent(jLabelCoinsValue)
                            .addComponent(jLabelStageName)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelStageValue)
                            .addComponent(jLabelVictoryName)
                            .addComponent(jLabelVictoryValue)
                            .addComponent(jLabelPLayerId))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelKnowledgeName)
                            .addComponent(jLabelKnowledgeValue))
                        .addComponent(jLabelCSName, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jLabelCSValue)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabelCentrifugeName)
                        .addComponent(jLabelCentrifugeValue)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelPumpName)
                    .addComponent(jLabelTMName)
                    .addComponent(jLabelTMValue)
                    .addComponent(jLabelPumpValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelProoferValue, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabelProoferName)
                    .addComponent(jLabelCGName)
                    .addComponent(jLabelCGValue))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelActions)
                            .addComponent(jLabelDeck)
                            .addComponent(jLabelCardsPlayed))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelEntrepreunariatName)
                            .addComponent(jLabelEntrepreunariatValue)
                            .addComponent(jLabelECName)
                            .addComponent(jLabelECValue))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelProjetName)
                            .addComponent(jLabelProjetValue))
                        .addGap(18, 18, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPaneCardsPlayed)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator3)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelCardInfos)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelName)
                            .addComponent(jLabelNameValue))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelType)
                            .addComponent(jLabelTypeValue))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabelCost)
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPaneCostValue, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabelProductedRessources)
                        .addGap(9, 9, 9)
                        .addComponent(jScrollPaneProductedRessourcesValue, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCoinsEarned)
                            .addComponent(jLabelCoinsEarnedValue))
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCardRequiredToPlayForFree)
                            .addComponent(jLabelCardRequiredToPlayForFreeValue))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCardBecomingFree)
                            .addComponent(jLabelCardBecomingFreeValue)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPaneCards, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                            .addComponent(jScrollPaneActions, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(22, 22, 22)
                        .addComponent(jLabelBuyNeighborsRessources)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabelCostToBuyValue)
                                .addComponent(jLabelCostToBuy))
                            .addComponent(jScrollPaneBuyNeighbourBeforeRessourcesValue, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPaneBuyNeighbourAfterRessourcesValue, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jButtonBuy)))
                        .addGap(54, 54, 54)
                        .addComponent(jButtonValidate)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelWonderName)
                .addGap(18, 18, 18)
                .addComponent(jLabelWonderEvolutionFirst)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabelWonderEvolutionSecond)
                .addGap(9, 9, 9)
                .addComponent(jLabelWonderEvolutionThird)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonLeaderboard))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLeaderboardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonLeaderboardMouseClicked
        // TODO add your handling code here:
        this.frame.displayLeaderboard();
    }//GEN-LAST:event_jButtonLeaderboardMouseClicked

    
    private void jListActionValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListActionValueChanged
        Player player = this.frame.gameManager.getPlayer(this.playerId);
        // activer le bouton permettant de sélectionner une action
        /*if(this.jButtonSelectAction.isEnabled() == false && !player.getIsValidate()) {
            this.jButtonSelectAction.setEnabled(true);
        }*/
        
        // test si activation du bouton permettant de validation
        if(this.jButtonValidate.isEnabled() == false && !player.getIsValidate() && this.jListCards.hasFocus()) {
            this.jButtonValidate.setEnabled(true);
        }
    }//GEN-LAST:event_jListActionValueChanged

    private void jListCardsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListCardsValueChanged
        Player player = this.frame.gameManager.getPlayer(this.playerId);
        // 1. Récupération de la carte sélectionnée
        String nameCardSelected = this.jListCards.getSelectedValue();
        Card cardSelected = player.getCardDeckByName(nameCardSelected);
        // 2. Update Card Infos
        this.showCardInfos(cardSelected);
        // 3. Test si activation du bouton permettant de validation
        if(this.jButtonValidate.isEnabled() == false && !player.getIsValidate() && this.jListAction.hasFocus()) {
            this.jButtonValidate.setEnabled(true);
        }
    }//GEN-LAST:event_jListCardsValueChanged

    private void jButtonValidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidateActionPerformed
        // Désactivation du bouton
        this.jButtonValidate.setEnabled(false);
        // Désactivation des listes
        this.jListCards.setEnabled(false);
        this.jListAction.setEnabled(false);
        
        Player player = this.frame.gameManager.getPlayer(this.playerId);
        
        /* Select Card */
        // Récupération de la carte sélectionnée
        String nameCardSelected = this.jListCards.getSelectedValue();
        Card cardSelected = player.getCardDeckByName(nameCardSelected);
        // Sélection de la carte
        player.setCardSelected(cardSelected);
        this.frame.gameManager.setPlayer(player, this.playerId);
        /* Select Action */
        // Récupération de l'action sélectionnée
        Action actionSelected = Action.valueOf(this.jListAction.getSelectedValue());
        // Sélection de l'action
        player.setActionSelected(actionSelected);
        this.frame.gameManager.setPlayer(player, this.playerId);
        
        //Player player = this.frame.gameManager.getPlayer(this.playerId);
        player.setIsValidate(true);
        this.frame.gameManager.setPlayer(player, this.playerId);
        
        // On regarde si tous les joueurs ont validés 
        if(this.frame.gameManager.checkIfPlayersValidate() == true) {
            // On joue le tour
            this.frame.gameManager.playTurn();
            // GUI update
            this.frame.guiUpdatePlayersPanel();
        }
    }//GEN-LAST:event_jButtonValidateActionPerformed

    private void jButtonLeaderboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLeaderboardActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonLeaderboardActionPerformed

    private void jButtonBuyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBuyActionPerformed
        // 1. Récupération de la carte sélectionnée
        Player player = this.frame.gameManager.getListPlayers().get(this.playerId);
        Card cardSelected = player.getCardSelectedToBuyRessources();
        if(cardSelected != null) {
            // 2. Calcul du prix
            int priceCoins = 0;
            if(cardSelected.getListProductRessources() != null) {
                for(int i=0; i<cardSelected.getListProductRessources().size(); i++) {
                    priceCoins = priceCoins + (cardSelected.getListProductRessources().get(i).getValue() * 2);
                }
            }
            // 3. Achat des ressources
            if(priceCoins <= player.getScore().getCoin().getValue()) {
                // Le joueur possède suffisament de coins
                // 3.1. Récupération des ressources
                for(int i=0; i<cardSelected.getListProductRessources().size(); i++) {
                    RessourcePack ressource = cardSelected.getListProductRessources().get(i);
                    for(int j=0; j<player.getProductedRessources().size(); j++) {
                        if(player.getProductedRessources().get(j).getType() == ressource.getType()) {
                            player.getProductedRessources().get(j).setValue(player.getProductedRessources().get(j).getValue() + ressource.getValue());
                        }
                    }        
                }
                // 3.2. Le joueur voisin récupére le priceCoins
                int id = player.getIdPlayerCardSelectedToBuyRessources();
                Player playerNeighbour = this.frame.gameManager.getListPlayers().get(id);
                playerNeighbour.getScore().getCoin().setValue(playerNeighbour.getScore().getCoin().getValue() + priceCoins);
                // 3.3. Le joueur perd le princeCoins
                player.getScore().getCoin().setValue(player.getScore().getCoin().getValue() - priceCoins);
            } else {
                // Le joueur ne possède pas suffisament de coins
                player.getScore().getCoin().setValue(player.getScore().getCoin().getValue() - 2);
            }
        }
        // 4. Actualisation 
        this.frame.guiUpdatePlayersPanel();
        // 5. Désactivation du bouton et de la sélection des jList
        this.jButtonBuy.setEnabled(false);
        this.jListBuyNeighbourBeforeRessourcesValue.setEnabled(false);
        this.jListBuyNeighbourAfterRessourcesValue.setEnabled(false);
    }//GEN-LAST:event_jButtonBuyActionPerformed

    private void jListBuyNeighbourBeforeRessourcesValueValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListBuyNeighbourBeforeRessourcesValueValueChanged
        int id;
        if(this.playerId == 0) {
            id = this.frame.gameManager.getListPlayers().size() - 1;
        } else {
            id = this.playerId - 1;
        }
        Player player = this.frame.gameManager.getPlayer(id);
        this.frame.gameManager.getPlayer(this.playerId).setIdPlayerCardSelectedToBuyRessources(id);
        // 1. Récupération de la carte sélectionnée
        String nameCardSelected = this.jListBuyNeighbourBeforeRessourcesValue.getSelectedValue();
        Card cardSelected = player.getCardPlayedByName(nameCardSelected);
        this.frame.gameManager.getListPlayers().get(this.playerId).setCardSelectedToBuyRessources(cardSelected);
        // 2. Update Card Infos
        this.showCardInfos(cardSelected);
        // 3. Update price to buy
        int priceCoins = 0;
        if(cardSelected != null && cardSelected.getListProductRessources() != null) {
            for(int i=0; i<cardSelected.getListProductRessources().size(); i++) {
                priceCoins = priceCoins + (cardSelected.getListProductRessources().get(i).getValue() * 2);
            }
        }
        this.jLabelCostToBuyValue.setText(priceCoins + " Coins");
        // 4. Suppression de la sélection de la liste concernant l'autre voisin
        jListBuyNeighbourAfterRessourcesValue.setSelectedValue(null, true);
        // 5. Activation du bouton permettant l'achat
        this.jButtonBuy.setEnabled(true);
    }//GEN-LAST:event_jListBuyNeighbourBeforeRessourcesValueValueChanged

    private void jListBuyNeighbourAfterRessourcesValueValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListBuyNeighbourAfterRessourcesValueValueChanged
        int id;
        if(this.playerId == this.frame.gameManager.getListPlayers().size() - 1) {
            id = 0;
        } else {
            id = this.playerId + 1;
        }
        Player player = this.frame.gameManager.getPlayer(id);
        this.frame.gameManager.getPlayer(this.playerId).setIdPlayerCardSelectedToBuyRessources(id);
        // 1. Récupération de la carte sélectionnée
        String nameCardSelected = this.jListBuyNeighbourAfterRessourcesValue.getSelectedValue();
        Card cardSelected = player.getCardPlayedByName(nameCardSelected);
        this.frame.gameManager.getListPlayers().get(this.playerId).setCardSelectedToBuyRessources(cardSelected);
        // 2. Update Card Infos
        this.showCardInfos(cardSelected);
        // 3. Update price to buy
        int priceCoins = 0;
        if(cardSelected != null && cardSelected.getListProductRessources() != null) {
            for(int i=0; i<cardSelected.getListProductRessources().size(); i++) {
                priceCoins = priceCoins + (cardSelected.getListProductRessources().get(i).getValue() * 2);
            }
        }
        this.jLabelCostToBuyValue.setText(priceCoins + " Coins");
        // 4. Suppression de la sélection de la liste concernant l'autre voisin
        jListBuyNeighbourBeforeRessourcesValue.setSelectedValue(null, true);
        // 5. Activation du bouton permettant l'achat
        this.jButtonBuy.setEnabled(true);
    }//GEN-LAST:event_jListBuyNeighbourAfterRessourcesValueValueChanged

    // Permet de mettre fin à la partie
    public void end() {
        this.frame.endGame();
    }
    
    public void guiUpdate() {
        // On commence par vérifier si la partie est terminée
        if(this.frame.gameManager.getEndGame() == true) {
            this.end();
        }
        
        Player player = this.frame.gameManager.getPlayer(this.playerId);
        Deck deck = player.getDeck();
        Deck cardsPlayed = player.getCardsPlayed();
        
        player.getProductedRessources().forEach((productedRessource) -> {
            switch(productedRessource.getType()) {
                case CS:
                    this.jLabelCSValue.setText(Integer.toString(productedRessource.getValue()));
                    break;
                case TM:
                    this.jLabelTMValue.setText(Integer.toString(productedRessource.getValue()));
                    break;
                case CG:
                    this.jLabelCGValue.setText(Integer.toString(productedRessource.getValue()));
                    break;
                case EC:
                    this.jLabelECValue.setText(Integer.toString(productedRessource.getValue()));
                    break;
                case STAGE:
                    this.jLabelStageValue.setText(Integer.toString(productedRessource.getValue()));
                    break;
                case PROJET:
                    this.jLabelProjetValue.setText(Integer.toString(productedRessource.getValue()));
                    break;
                case ENTREPREUNARIAT:
                    this.jLabelEntrepreunariatValue.setText(Integer.toString(productedRessource.getValue()));
                    break;
            }
        });
        this.jLabelCoinsValue.setText(Integer.toString(player.getScore().getCoin().getValue()));
        this.jLabelVictoryValue.setText(Integer.toString(player.getScore().getTotalVictoryPoints().getValue()));
        this.jLabelKnowledgeValue.setText(Integer.toString(player.getScore().getKnowledge().getValue()));
        this.jLabelCentrifugeValue.setText(Integer.toString(player.getScore().getCentrifuge().getValue()));
        this.jLabelPumpValue.setText(Integer.toString(player.getScore().getPump().getValue()));
        this.jLabelProoferValue.setText(Integer.toString(player.getScore().getProofer().getValue()));
        
        this.jLabelWonderEvolutionFirst.setForeground(Color.black);
        this.jLabelWonderEvolutionSecond.setForeground(Color.black);
        this.jLabelWonderEvolutionThird.setForeground(Color.black);
        
        this.jLabelWonderName.setText(player.getGameBoard().getName().toString() + " - " + player.getGameBoard().getEvolution());
        this.jLabelWonderEvolutionFirst.setText("1.Cost:[");
        this.jLabelWonderEvolutionSecond.setText("2.Cost:[");
        this.jLabelWonderEvolutionThird.setText("3.Cost:[");
        player.getGameBoard().getSteps().get(0).getCost().forEach((cost) -> {
            this.jLabelWonderEvolutionFirst.setText(this.jLabelWonderEvolutionFirst.getText() + cost.getType() + " : " + cost.getValue() + " | ");
        });
        player.getGameBoard().getSteps().get(1).getCost().forEach((cost) -> {
            this.jLabelWonderEvolutionSecond.setText(this.jLabelWonderEvolutionSecond.getText() + cost.getType() + " : " + cost.getValue() + " | ");
        });
        player.getGameBoard().getSteps().get(2).getCost().forEach((cost) -> {
            this.jLabelWonderEvolutionThird.setText(this.jLabelWonderEvolutionThird.getText() + cost.getType() + " : " + cost.getValue() + " | ");
        });
        this.jLabelWonderEvolutionFirst.setText(this.jLabelWonderEvolutionFirst.getText() + "]");
        this.jLabelWonderEvolutionSecond.setText(this.jLabelWonderEvolutionSecond.getText() + "]");
        this.jLabelWonderEvolutionThird.setText(this.jLabelWonderEvolutionThird.getText() + "]");
        
        // Initialise le Card Infos
        this.jLabelNameValue.setText("/");
        this.jLabelTypeValue.setText("/");
        this.jLabelCoinsEarnedValue.setText("/");
        this.jLabelCardRequiredToPlayForFreeValue.setText("/");
        this.jLabelCardBecomingFreeValue.setText("/");
        DefaultListModel modelCardCost = new DefaultListModel();
        this.jListCostValue.setModel(modelCardCost);
        DefaultListModel modelCardProductedRessources = new DefaultListModel();
        this.jListProductedRessourcesValue.setModel(modelCardProductedRessources);
        
        // Initialisation de la liste des cartes du deck
        DefaultListModel modelCards = new DefaultListModel();
        for(int i=0; i<deck.getListCards().size(); i++) {
            modelCards.addElement(deck.getListCards().get(i).getName());
        }
        this.jListCards.setModel(modelCards);
        // Initialisation de la liste des cartes jouées - A FINIR / VERIFIER !!
        DefaultListModel modelCardsPlayed = new DefaultListModel();
        for(int i=0; i<cardsPlayed.getListCards().size(); i++) {
            modelCardsPlayed.addElement(cardsPlayed.getListCards().get(i).getName());
        }
        this.jListCardsPlayed.setModel(modelCardsPlayed);
        // Initialisation de la liste des cartes jouées par les autres joueurs
        int id;
        // Récupération des cartes jouées par le joueur N-1
        DefaultListModel modelCardsPlayedBuyRessourcesNeighbourBefore = new DefaultListModel();
        if(this.playerId == 0) {
            id = this.frame.gameManager.getListPlayers().size() - 1;
        } else {
            id = this.playerId - 1;
        }
        Deck cardsPlayedNeighbourBefore = this.frame.gameManager.getListPlayers().get(id).getCardsPlayed();
        for(int i=0; i< cardsPlayedNeighbourBefore.getListCards().size(); i++) {
            Card _card = cardsPlayedNeighbourBefore.getListCards().get(i);
            modelCardsPlayedBuyRessourcesNeighbourBefore.addElement(_card.getName());
        }
        this.jListBuyNeighbourBeforeRessourcesValue.setModel(modelCardsPlayedBuyRessourcesNeighbourBefore);
        this.jListBuyNeighbourBeforeRessourcesValue.setEnabled(true);
        // Récupération des cartes jouées par le joueur N+1
        DefaultListModel modelCardsPlayedBuyRessourcesNeighbourAfter = new DefaultListModel();
        if(this.playerId == this.frame.gameManager.getListPlayers().size() - 1) {
            id = 0;
        } else {
            id = this.playerId + 1;
        }
        Deck cardsPlayedNeighbourAfter = this.frame.gameManager.getListPlayers().get(id).getCardsPlayed();
        for(int i=0; i< cardsPlayedNeighbourAfter.getListCards().size(); i++) {
            Card _card = cardsPlayedNeighbourAfter.getListCards().get(i);
            modelCardsPlayedBuyRessourcesNeighbourAfter.addElement(_card.getName());
        }
        this.jListBuyNeighbourAfterRessourcesValue.setModel(modelCardsPlayedBuyRessourcesNeighbourAfter);
        this.jListBuyNeighbourAfterRessourcesValue.setEnabled(true);
        // Désactivation du bouton d'achat
        this.jButtonBuy.setEnabled(false);
        // Initialisation du prix d'achat
        this.jLabelCostToBuyValue.setText("/");
        // Initialisation de la liste des actions
        DefaultListModel modelActions = new DefaultListModel();
        EnumSet.allOf(Action.class).forEach(action -> modelActions.addElement(action.toString()));
        modelActions.removeElement(Action.BUY.toString());
        this.jListAction.setModel(modelActions);
        // Désactivation du bouton
        this.jButtonValidate.setEnabled(false);
        // Activation des listes
        this.jListCards.setEnabled(true);
        this.jListAction.setEnabled(true);
        // Affichage de l'âge 
        this.showAge(player.getGameBoard().getEvolution());
    }
    
    public void showCardInfos(Card card) {
        // Initialise le Card Infos
        this.jLabelNameValue.setText("/");
        this.jLabelTypeValue.setText("/");
        this.jLabelCoinsEarnedValue.setText("/");
        this.jLabelCardRequiredToPlayForFreeValue.setText("/");
        this.jLabelCardBecomingFreeValue.setText("/");
        DefaultListModel modelCardCost = new DefaultListModel();
        this.jListCostValue.setModel(modelCardCost);
        DefaultListModel modelCardProductedRessources = new DefaultListModel();
        this.jListProductedRessourcesValue.setModel(modelCardProductedRessources);
        if(card != null) {
            // Affichage des informations relatives à la carte
            if(card.getName() != null) {
                this.jLabelNameValue.setText(card.getName());
            }
            if(card.getType() != null) {
                this.jLabelTypeValue.setText(card.getType().toString());
            }
            if(card.getCoinsEarned() != null) {
                this.jLabelCoinsEarnedValue.setText(card.getCoinsEarned().getValue() + " " + card.getCoinsEarned().getType());
            }
            if(card.getCardRequiredToBePlayedBeforeInOrderToPlayThisCardForFree() != null) {
                this.jLabelCardRequiredToPlayForFreeValue.setText(card.getCardRequiredToBePlayedBeforeInOrderToPlayThisCardForFree().getName());
            }
            if(card.getCardsBecomingFreeAfterPlayingThisCard() != null) {
                this.jLabelCardBecomingFreeValue.setText(card.getCardsBecomingFreeAfterPlayingThisCard().toString());
            }
            if(card.getCost() != null) {
                modelCardCost = new DefaultListModel();
                for(int i=0; i<card.getCost().size(); i++) {
                    String element = card.getCost().get(i).getType() + " x " + card.getCost().get(i).getValue();
                    modelCardCost.addElement(element);
                }
                this.jListCostValue.setModel(modelCardCost);
            }
            if(card.getListProductRessources() != null) {
                modelCardProductedRessources = new DefaultListModel();
                for(int i=0; i<card.getListProductRessources().size(); i++) {
                    String element = card.getListProductRessources().get(i).getType() + " x " + card.getListProductRessources().get(i).getValue();
                    modelCardProductedRessources.addElement(element);
                }
                this.jListProductedRessourcesValue.setModel(modelCardProductedRessources);
            }
        }
    }
    
    public void showAge(Evolution age) {
        if(null != age) switch (age) {
            case NONE:
                this.jLabelWonderEvolutionFirst.setForeground(Color.black);
                this.jLabelWonderEvolutionSecond.setForeground(Color.black);
                this.jLabelWonderEvolutionThird.setForeground(Color.black);
                break;
            case FIRST:
                this.jLabelWonderEvolutionFirst.setForeground(Color.green);
                this.jLabelWonderEvolutionSecond.setForeground(Color.black);
                this.jLabelWonderEvolutionThird.setForeground(Color.black);
                break;
            case SECOND:
                this.jLabelWonderEvolutionFirst.setForeground(Color.green);
                this.jLabelWonderEvolutionSecond.setForeground(Color.green);
                this.jLabelWonderEvolutionThird.setForeground(Color.black);
                break;
            case THIRD:
                this.jLabelWonderEvolutionFirst.setForeground(Color.green);
                this.jLabelWonderEvolutionSecond.setForeground(Color.green);
                this.jLabelWonderEvolutionThird.setForeground(Color.green);
                break;
            default:
                break;
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBuy;
    private javax.swing.JButton jButtonLeaderboard;
    private javax.swing.JButton jButtonValidate;
    private javax.swing.JLabel jLabelActions;
    private javax.swing.JLabel jLabelBuyNeighborsRessources;
    private javax.swing.JLabel jLabelCGName;
    private javax.swing.JLabel jLabelCGValue;
    private javax.swing.JLabel jLabelCSName;
    private javax.swing.JLabel jLabelCSValue;
    private javax.swing.JLabel jLabelCardBecomingFree;
    private javax.swing.JLabel jLabelCardBecomingFreeValue;
    private javax.swing.JLabel jLabelCardInfos;
    private javax.swing.JLabel jLabelCardRequiredToPlayForFree;
    private javax.swing.JLabel jLabelCardRequiredToPlayForFreeValue;
    private javax.swing.JLabel jLabelCardsPlayed;
    private javax.swing.JLabel jLabelCentrifugeName;
    private javax.swing.JLabel jLabelCentrifugeValue;
    private javax.swing.JLabel jLabelCoins;
    private javax.swing.JLabel jLabelCoinsEarned;
    private javax.swing.JLabel jLabelCoinsEarnedValue;
    private javax.swing.JLabel jLabelCoinsValue;
    private javax.swing.JLabel jLabelCost;
    private javax.swing.JLabel jLabelCostToBuy;
    private javax.swing.JLabel jLabelCostToBuyValue;
    private javax.swing.JLabel jLabelDeck;
    private javax.swing.JLabel jLabelECName;
    private javax.swing.JLabel jLabelECValue;
    private javax.swing.JLabel jLabelEntrepreunariatName;
    private javax.swing.JLabel jLabelEntrepreunariatValue;
    private javax.swing.JLabel jLabelKnowledgeName;
    private javax.swing.JLabel jLabelKnowledgeValue;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JLabel jLabelNameValue;
    private javax.swing.JLabel jLabelPLayerId;
    private javax.swing.JLabel jLabelProductedRessources;
    private javax.swing.JLabel jLabelProjetName;
    private javax.swing.JLabel jLabelProjetValue;
    private javax.swing.JLabel jLabelProoferName;
    private javax.swing.JLabel jLabelProoferValue;
    private javax.swing.JLabel jLabelPumpName;
    private javax.swing.JLabel jLabelPumpValue;
    private javax.swing.JLabel jLabelStageName;
    private javax.swing.JLabel jLabelStageValue;
    private javax.swing.JLabel jLabelTMName;
    private javax.swing.JLabel jLabelTMValue;
    private javax.swing.JLabel jLabelType;
    private javax.swing.JLabel jLabelTypeValue;
    private javax.swing.JLabel jLabelVictoryName;
    private javax.swing.JLabel jLabelVictoryValue;
    private javax.swing.JLabel jLabelWonderEvolutionFirst;
    private javax.swing.JLabel jLabelWonderEvolutionSecond;
    private javax.swing.JLabel jLabelWonderEvolutionThird;
    private javax.swing.JLabel jLabelWonderName;
    private javax.swing.JList<String> jListAction;
    private javax.swing.JList<String> jListBuyNeighbourAfterRessourcesValue;
    private javax.swing.JList<String> jListBuyNeighbourBeforeRessourcesValue;
    private javax.swing.JList<String> jListCards;
    private javax.swing.JList<String> jListCardsPlayed;
    private javax.swing.JList<String> jListCostValue;
    private javax.swing.JList<String> jListProductedRessourcesValue;
    private javax.swing.JScrollPane jScrollPaneActions;
    private javax.swing.JScrollPane jScrollPaneBuyNeighbourAfterRessourcesValue;
    private javax.swing.JScrollPane jScrollPaneBuyNeighbourBeforeRessourcesValue;
    private javax.swing.JScrollPane jScrollPaneCards;
    private javax.swing.JScrollPane jScrollPaneCardsPlayed;
    private javax.swing.JScrollPane jScrollPaneCostValue;
    private javax.swing.JScrollPane jScrollPaneProductedRessourcesValue;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    // End of variables declaration//GEN-END:variables
}
