/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ViewLibrary;

import EnumLibrary.Action;
import EnumLibrary.Evolution;
import ModelLibrary.CardLibrary.Card;
import ModelLibrary.PlayerLibrary.Deck;
import ModelLibrary.PlayerLibrary.Player;
import java.awt.Color;
import java.util.EnumSet;
import javax.swing.DefaultListModel;

/**
 *
 * @author Hicham, Aurélien
 */
public class PlayerPanel extends javax.swing.JPanel {
    private MainFrame frame;
    private int playerId;
    
    /**
     * Creates new form PlayerPanel
     * @param frame
     * @param playerId
     */
    public PlayerPanel(MainFrame frame, int playerId) {
        this.frame = frame;
        this.playerId = playerId;
        initComponents();
        this.jLabelPLayerId.setText("Player n° " + this.playerId);
        
        this.guiUpdate();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabelPLayerId = new javax.swing.JLabel();
        jButtonLeaderboard = new javax.swing.JButton();
        jScrollPaneCards = new javax.swing.JScrollPane();
        jListCards = new javax.swing.JList<>();
        jLabelDeck = new javax.swing.JLabel();
        jScrollPaneActions = new javax.swing.JScrollPane();
        jListAction = new javax.swing.JList<>();
        jLabelActions = new javax.swing.JLabel();
        jScrollPaneCardsPlayed = new javax.swing.JScrollPane();
        jListCardsPlayed = new javax.swing.JList<>();
        jLabelCardsPlayed = new javax.swing.JLabel();
        jLabelWonderName = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jButtonValidate = new javax.swing.JButton();
        jLabelCoins = new javax.swing.JLabel();
        jLabelCoinsValue = new javax.swing.JLabel();
        jLabelWonderEvolutionFirst = new javax.swing.JLabel();
        jLabelWonderEvolutionSecond = new javax.swing.JLabel();
        jLabelWonderEvolutionThird = new javax.swing.JLabel();

        jLabelPLayerId.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelPLayerId.setText("Player n° ID");

        jButtonLeaderboard.setText("Display Leaderboard");
        jButtonLeaderboard.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButtonLeaderboardMouseClicked(evt);
            }
        });

        jListCards.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListCards.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListCardsValueChanged(evt);
            }
        });
        jScrollPaneCards.setViewportView(jListCards);

        jLabelDeck.setText("Deck");

        jListAction.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListAction.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListActionValueChanged(evt);
            }
        });
        jScrollPaneActions.setViewportView(jListAction);

        jLabelActions.setText("Actions");

        jListCardsPlayed.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListCardsPlayed.setEnabled(false);
        jScrollPaneCardsPlayed.setViewportView(jListCardsPlayed);

        jLabelCardsPlayed.setText("Cards played");

        jLabelWonderName.setText("Wonder's Name");

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jButtonValidate.setText("Validate");
        jButtonValidate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonValidateActionPerformed(evt);
            }
        });

        jLabelCoins.setText("Coins : ");

        jLabelCoinsValue.setText("0");

        jLabelWonderEvolutionFirst.setText("First");

        jLabelWonderEvolutionSecond.setText("Second");

        jLabelWonderEvolutionThird.setText("Third");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPaneCardsPlayed, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 12, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jLabelCardsPlayed)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPaneCards, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(33, 33, 33)
                                        .addComponent(jLabelDeck))))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonValidate, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jButtonLeaderboard, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabelPLayerId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPaneActions, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabelActions))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabelCoins)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelCoinsValue))))
                    .addComponent(jSeparator2))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(144, 144, 144)
                .addComponent(jLabelWonderName)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jLabelWonderEvolutionFirst)
                .addGap(108, 108, 108)
                .addComponent(jLabelWonderEvolutionSecond)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelWonderEvolutionThird)
                .addGap(52, 52, 52))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jLabelPLayerId))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelCoins)
                            .addComponent(jLabelCoinsValue))))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelDeck)
                    .addComponent(jLabelActions)
                    .addComponent(jLabelCardsPlayed))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPaneCards, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(jScrollPaneActions, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonValidate))
                    .addComponent(jScrollPaneCardsPlayed, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabelWonderName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelWonderEvolutionSecond)
                    .addComponent(jLabelWonderEvolutionThird)
                    .addComponent(jLabelWonderEvolutionFirst))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonLeaderboard)
                .addGap(2, 2, 2))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLeaderboardMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButtonLeaderboardMouseClicked
        // TODO add your handling code here:
        this.frame.displayLeaderboard();
    }//GEN-LAST:event_jButtonLeaderboardMouseClicked

    
    private void jListActionValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListActionValueChanged
        Player player = this.frame.gameManager.getPlayer(this.playerId);
        // activer le bouton permettant de sélectionner une action
        /*if(this.jButtonSelectAction.isEnabled() == false && !player.getIsValidate()) {
            this.jButtonSelectAction.setEnabled(true);
        }*/
        
        // test si activation du bouton permettant de validation
        if(this.jButtonValidate.isEnabled() == false && !player.getIsValidate() && this.jListCards.hasFocus()) {
            this.jButtonValidate.setEnabled(true);
        }
    }//GEN-LAST:event_jListActionValueChanged

    private void jListCardsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListCardsValueChanged
        Player player = this.frame.gameManager.getPlayer(this.playerId);
        // test si activation du bouton permettant de validation
        if(this.jButtonValidate.isEnabled() == false && !player.getIsValidate() && this.jListAction.hasFocus()) {
            this.jButtonValidate.setEnabled(true);
        }
    }//GEN-LAST:event_jListCardsValueChanged

    private void jButtonValidateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonValidateActionPerformed
        // Désactivation du bouton
        this.jButtonValidate.setEnabled(false);
        // Désactivation des listes
        this.jListCards.setEnabled(false);
        this.jListAction.setEnabled(false);
        
        Player player = this.frame.gameManager.getPlayer(this.playerId);
        
        /* Select Card */
        // Récupération de la carte sélectionnée
        String nameCardSelected = this.jListCards.getSelectedValue();
        Card cardSelected = player.getCardDeckByName(nameCardSelected);
        // Sélection de la carte
        player.setCardSelected(cardSelected);
        this.frame.gameManager.setPlayer(player, this.playerId);
        /* Select Action */
        // Récupération de l'action sélectionnée
        Action actionSelected = Action.valueOf(this.jListAction.getSelectedValue());
        // Sélection de l'action
        player.setActionSelected(actionSelected);
        this.frame.gameManager.setPlayer(player, this.playerId);
        
        //Player player = this.frame.gameManager.getPlayer(this.playerId);
        player.setIsValidate(true);
        this.frame.gameManager.setPlayer(player, this.playerId);
        
        // On regarde si tous les joueurs ont validés 
        if(this.frame.gameManager.checkIfPlayersValidate() == true) {
            // On joue le tour
            this.frame.gameManager.playTurn();
            // GUI update
            this.frame.guiUpdatePlayersPanel();
        }
    }//GEN-LAST:event_jButtonValidateActionPerformed

    public void guiUpdate() {
        Player player = this.frame.gameManager.getPlayer(this.playerId);
        Deck deck = player.getDeck();
        Deck cardsPlayed = player.getCardsPlayed();
        
        this.jLabelCoinsValue.setText(Integer.toString(player.getScore().getCoin().getValue()));
        
        this.jLabelWonderEvolutionFirst.setForeground(Color.black);
        this.jLabelWonderEvolutionSecond.setForeground(Color.black);
        this.jLabelWonderEvolutionThird.setForeground(Color.black);
        
        // Initialisation de la liste des cartes du deck
        DefaultListModel modelCards = new DefaultListModel();
        for(int i=0; i<deck.getListCards().size(); i++) {
            modelCards.addElement(deck.getListCards().get(i).getName());
        }
        this.jListCards.setModel(modelCards);
        // Initialisation de la liste des cartes jouées - A FINIR / VERIFIER !!
        DefaultListModel modelCardsPlayed = new DefaultListModel();
        for(int i=0; i<cardsPlayed.getListCards().size(); i++) {
            modelCardsPlayed.addElement(cardsPlayed.getListCards().get(i).getName());
        }
        this.jListCardsPlayed.setModel(modelCardsPlayed);
        // Initialisation de la liste des actions
        DefaultListModel modelActions = new DefaultListModel();
        EnumSet.allOf(Action.class).forEach(action -> modelActions.addElement(action.toString()));
        this.jListAction.setModel(modelActions);
        // Désactivation du bouton
        this.jButtonValidate.setEnabled(false);
        // Activation des listes
        this.jListCards.setEnabled(true);
        this.jListAction.setEnabled(true);
        // Affichage de l'âge 
        this.showAge(player.getGameBoard().getEvolution());
    }
    
    public void showAge(Evolution age) {
        if(null != age) switch (age) {
            case NONE:
                this.jLabelWonderEvolutionFirst.setForeground(Color.black);
                this.jLabelWonderEvolutionSecond.setForeground(Color.black);
                this.jLabelWonderEvolutionThird.setForeground(Color.black);
                break;
            case FIRST:
                this.jLabelWonderEvolutionFirst.setForeground(Color.green);
                this.jLabelWonderEvolutionSecond.setForeground(Color.black);
                this.jLabelWonderEvolutionThird.setForeground(Color.black);
                break;
            case SECOND:
                this.jLabelWonderEvolutionFirst.setForeground(Color.green);
                this.jLabelWonderEvolutionSecond.setForeground(Color.green);
                this.jLabelWonderEvolutionThird.setForeground(Color.black);
                break;
            case THIRD:
                this.jLabelWonderEvolutionFirst.setForeground(Color.green);
                this.jLabelWonderEvolutionSecond.setForeground(Color.green);
                this.jLabelWonderEvolutionThird.setForeground(Color.green);
                break;
            default:
                break;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLeaderboard;
    private javax.swing.JButton jButtonValidate;
    private javax.swing.JLabel jLabelActions;
    private javax.swing.JLabel jLabelCardsPlayed;
    private javax.swing.JLabel jLabelCoins;
    private javax.swing.JLabel jLabelCoinsValue;
    private javax.swing.JLabel jLabelDeck;
    private javax.swing.JLabel jLabelPLayerId;
    private javax.swing.JLabel jLabelWonderEvolutionFirst;
    private javax.swing.JLabel jLabelWonderEvolutionSecond;
    private javax.swing.JLabel jLabelWonderEvolutionThird;
    private javax.swing.JLabel jLabelWonderName;
    private javax.swing.JList<String> jListAction;
    private javax.swing.JList<String> jListCards;
    private javax.swing.JList<String> jListCardsPlayed;
    private javax.swing.JScrollPane jScrollPaneActions;
    private javax.swing.JScrollPane jScrollPaneCards;
    private javax.swing.JScrollPane jScrollPaneCardsPlayed;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    // End of variables declaration//GEN-END:variables
}
